generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @unique @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String @unique
  createdBy User @relation("CreatedOrganization", fields: [createdById], references: [id])
  users              User[] @relation("UserOrganization")
  positions          Position[]
  candidates         Candidate[]
  AssessmentTemplate AssessmentTemplate[]
  TaskTemplate       TaskTemplate[]
}

model User {
  id           String        @id @unique @default(uuid())
  name         String
  email        String       @unique
  orgId        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization? @relation("UserOrganization", fields: [orgId], references: [id])
  createdOrganization Organization? @relation("CreatedOrganization")
  userRoles    UserRole[]
  Review       Review[]
  Comment      Comment[]
}

model Role {
  id        String     @id @unique @default(uuid())
  role      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userRoles UserRole[]
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId])
  @@index([roleId])
}

model Tag {
  id  String @id @unique
  tag String
}

model Position {
  id        String   @id @unique @default(uuid())
  title     String
  orgId     String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  candidate    CandidatePoolEntry[]
  organization Organization         @relation(fields: [orgId], references: [id])
  Assessment   Assessment[]
}

model Candidate {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  orgId     String
  createdAt DateTime @default(now())

  positions    CandidatePoolEntry[]
  organization Organization         @relation(fields: [orgId], references: [id])
  Assessment   Assessment[]
}

model CandidatePoolEntry {
  id          String   @id @unique @default(uuid())
  candidateId String
  positionId  String
  status      String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  candidate Candidate @relation(fields: [candidateId], references: [id])
  position  Position  @relation(fields: [positionId], references: [id])

  @@unique([candidateId, positionId])
}

model AssessmentTemplate {
  id           String       @id @unique @default(uuid())
  title        String
  description  String
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  Assessment   Assessment[]
}

model TaskTemplate {
  id                 String @id @unique @default(uuid())
  title              String
  content            String @db.VarChar(500)
  public_test_cases  Json
  private_test_cases Json

  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  Task         Task[]
}

model Task {
  id             String   @id @unique @default(uuid())
  assessmentId   String
  taskTemplateId String
  candidateCode  String   @db.Text
  lastUpdated    DateTime

  Assessment   Assessment   @relation(fields: [assessmentId], references: [id])
  TaskTemplate TaskTemplate @relation(fields: [taskTemplateId], references: [id])
  Comment      Comment[]
}

model Assessment {
  id                   String   @id @unique @default(uuid())
  candidateId          String
  positionId           String
  assessmentTemplateId String
  assignedAt           DateTime
  isSubmitted          Boolean
  uniqueLink           String

  Candidate          Candidate          @relation(fields: [candidateId], references: [id])
  Position           Position           @relation(fields: [positionId], references: [id])
  AssessmentTemplate AssessmentTemplate @relation(fields: [assessmentTemplateId], references: [id])
  Task               Task[]
  Review             Review[]
}

model Review {
  id           String   @id @unique @default(uuid())
  assessmentId String
  reviewerId   String
  rating       Int
  content      String
  reviewedAt   DateTime @default(now())

  Assessment Assessment @relation(fields: [assessmentId], references: [id])
  Reviewer   User       @relation(fields: [reviewerId], references: [id])
}

model Comment {
  id         String   @id @unique @default(uuid())
  taskId     String
  content    String
  reviewerId String
  reviewedAt DateTime @default(now())

  Task     Task @relation(fields: [taskId], references: [id])
  Reviewer User @relation(fields: [reviewerId], references: [id])
}
